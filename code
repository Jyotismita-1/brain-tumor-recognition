def G(x, mean, std):
    return np.exp(-0.5*np.square((x-mean)/std))

def ExcesiveDark(x, M):
    return G(x, -25, M/9)

def VeryDark(x, M):
    return G(x, 0, M/9)

def Dark(x, M):
    return G(x, M/2, M/9)

def ModeratelyDark(x, M):
    return G(x, 5*M/4, M/9)

def ModeratelyBright(x, M):
    return G(x, M+(255-M)/9, (255-M)/9)

def Bright(x, M):
    return G(x, M+(255-M)/2, (255-M)/9)

def VeryBright(x, M):
    return G(x, 255, (255-M)/9)

def ExtremelyBright(x, M):
    return G(x, 300, (255-M)/9)

for M in (128, 64, 192):
    x = np.arange(-50, 306)
    
    ED = ExtremelyDark(x, M)
    VD = VeryDark(x, M)
    Da = Dark(x, M)
    SD = SlightlyDark(x, M)
    SB = SlightlyBright(x, M)
    Br = Bright(x, M)
    VB = VeryBright(x, M)
    EB = ExtremelyBright(x, M)
    
def OutputFuzzySet(x, f, M, thres):
    x = np.array(x)
    result = f(x, M)
    result[result > thres] = thres
    return result

def AggregateFuzzySets(fuzzy_sets):
    return np.max(np.stack(fuzzy_sets), axis=0)

def Infer(i, M, get_fuzzy_set=False):
    # Calculate degree of membership for each class
    VD = VeryDark(i, M)
    Da = Dark(i, M)
    SD = SlightlyDark(i, M)
    SB = SlightlyBright(i, M)
    Br = Bright(i, M)
    VB = VeryBright(i, M)
    
    
    x = np.arange(-50, 306)
    Inferences = (
        OutputFuzzySet(x, ExtremelyDark, M, VD),
        OutputFuzzySet(x, VeryDark, M, Da),
        OutputFuzzySet(x, Dark, M, SD),
        OutputFuzzySet(x, Bright, M, SB),
        OutputFuzzySet(x, VeryBright, M, Br),
        OutputFuzzySet(x, ExtremelyBright, M, VB)
    )
    
    
    fuzzy_output = AggregateFuzzySets(Inferences)
    
    
    if get_fuzzy_set:
        return np.average(x, weights=fuzzy_output), fuzzy_output
    return np.average(x, weights=fuzzy_output)
  def FuzzyContrastEnhance(rgb):
    
    lab = cv2.cvtColor(rgb, cv2.COLOR_RGB2LAB)
    l = lab[:, :, 0]
       
    M = np.mean(l)
    if M < 128:
        M = 127 - (127 - M)/2
    else:
        M = 128 + M/2
           
    x = list(range(-50,306))
    FuzzyTransform = dict(zip(x,[Infer(np.array([i]), M) for i in x]))
    
    
    u, inv = np.unique(l, return_inverse = True)
    l = np.array([FuzzyTransform[i] for i in u])[inv].reshape(l.shape)
        
    Min = np.min(l)
    Max = np.max(l)
    lab[:, :, 0] = (l - Min)/(Max - Min) * 255
        
    return cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)

def HE(rgb):
    lab = cv2.cvtColor(rgb, cv2.COLOR_RGB2LAB)
    lab[:, :, 0] = cv2.equalizeHist(lab[:, :, 0])
    return cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)

def CLAHE(rgb):
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    lab = cv2.cvtColor(rgb, cv2.COLOR_RGB2LAB)
    lab[:, :, 0] = clahe.apply(lab[:, :, 0])
    return cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)
shape_x = 512
shape_y = 512
input_img = Input(shape=(shape_x, shape_y, 3))
layer_1_1 = Conv2D(256, (1,1), padding='same', activation='relu')(input_img)
layer_1_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_1_1)
layer_1_2 = Conv2D(256, (1,1), padding='same', activation='relu')(input_img)
layer_1_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_1_2)
layer_1_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(input_img)
layer_1_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_1_3)
mid_1_1 = tf.keras.layers.concatenate([layer_1_1, layer_1_2, layer_1_3], axis = 3)
layer_2_1 = Conv2D(256, (1,1), padding='same', activation='relu')(mid_1_1)
layer_2_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_2_1)
layer_2_2 = Conv2D(256, (1,1), padding='same', activation='relu')(mid_1_1)
layer_2_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_2_2)
layer_2_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(mid_1_1)
layer_2_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_2_3)
mid_2_1 = tf.keras.layers.concatenate([layer_2_1, layer_2_2, layer_2_3], axis = 3)
max_pool1 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(mid_2_1)
layer_4_1 = Conv2D(256, (1,1), padding='same', activation='relu')(max_pool1)
layer_4_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_4_1)
layer_4_2 = Conv2D(256, (1,1), padding='same', activation='relu')(max_pool1)
layer_4_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_4_2)
layer_4_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(max_pool1)
layer_4_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_4_3)
mid_4_1 = tf.keras.layers.concatenate([layer_4_1, layer_4_2, layer_4_3], axis = 3)
con1 = concatenate([mid_1_1, mid_2_1])
layer_6_1 = Conv2D(256, (1,1), padding='same', activation='relu')(con1)
layer_6_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_6_1)
layer_6_2 = Conv2D(256, (1,1), padding='same', activation='relu')(con1)
layer_6_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_6_2)
layer_6_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(con1)
layer_6_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_6_3)
mid_6_1 = tf.keras.layers.concatenate([layer_6_1, layer_6_2, layer_6_3], axis = 3)
con2 = concatenate([mid_1_1, mid_2_1, mid_4_1])
max_pool2 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(con2)
layer_9_1 = Conv2D(256, (1,1), padding='same', activation='relu')(max_pool2)
layer_9_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_9_1)
layer_9_2 = Conv2D(256, (1,1), padding='same', activation='relu')(max_pool2)
layer_9_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_9_2)
layer_9_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(max_pool2)
layer_9_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_9_3)
mid_9_1 = tf.keras.layers.concatenate([layer_9_1, layer_9_2, layer_9_3], axis = 3)
con3 = concatenate([mid_1_1, mid_2_1, mid_4_1, mid_6_1])
layer_11_1 = Conv2D(256, (1,1), padding='same', activation='relu')(con3)
layer_11_1 = Conv2D(256, (3,3), padding='same', activation='relu')(layer_11_1)
layer_11_2 = Conv2D(256, (1,1), padding='same', activation='relu')(con3)
layer_11_2 = Conv2D(256, (5,5), padding='same', activation='relu')(layer_11_2)
layer_11_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(con3)
layer_11_3 = Conv2D(256, (1,1), padding='same', activation='relu')(layer_11_3)
mid_11_1 = tf.keras.layers.concatenate([layer_11_1, layer_11_2, layer_11_3], axis = 3)
con4 = concatenate([mid_1_1, mid_2_1, mid_4_1, mid_6_1, mid_9_1])
output = Dense(4, activation='softmax')(con4)
model = Model([input_img], output)
model.compile(loss='categorical crossentropy', optimizer='adam', metrics=['acuracy'])
for i in range(num_episodes):
    state = env.reset()
    eps *= eps_decay_factor
    done = False
    while not done:
        if np.random.random() < eps:
            action = np.random.randint(0, env.action_space.n)
        else:
            action = np.argmax(
              model.predict(np.identity(env.observation_space.n)[state:state + 1]))
        new_state, reward, done, _ = env.step(action)
        target = reward + 
          discount_factor * 
            np.max(
              model.predict(
                np.identity(env.observation_space.n)[new_state:new_state + 1]))
        target_vector = model.predict(
          np.identity(env.observation_space.n)[state:state + 1])[0]
        target_vector[action] = target
        model.fit(
          np.identity(env.observation_space.n)[state:state + 1], 
          target_vec.reshape(-1, env.action_space.n), 
          epochs=1, verbose=0)
        state = new_state
